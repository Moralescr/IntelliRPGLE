{
    // Files 
    "Files definition: Physical and logical files": {
        "prefix": "dclf",
        "body": [
            "dcl-f ${1:name} usage(${2:useType}) keyed;"
        ], 
        "description": "Declare files"
    },
    "Files definition: screen file": {
        "prefix": "dcldsp",
        "body": [
            "dcl-f ${1:name} workstn sfile(crtsfl:nrr);" 
        ], 
        "description": "Declare screen files"
    },
    // Array
    "Array: char, packed, zoned": {
        "prefix": "array",
        "body": [
            "dcl-s ${1:name} ${2|char,zoned,packed|}(${3:length)}) dim(${4:value}) ctdata perrcd(1);" 
        ], 
        "description": "Declare array"
    },
    // Copy
    "Copy": {
        "prefix": "copy",
        "body": [
            "/copy ${1:lib}/${2:srcmbr},${3:name}" 
        ], 
        "description": "Declare 'copy'"
    },
    // Include
    "Include": {
        "prefix": "include",
        "body": [
            "/include ${1:lib}/${2:srcmbr},${3:name}" 
        ], 
        "description": "Declare 'include'"
    },
    // Variables
    "Variables: char, zoned, packed type": {
        "prefix": "dcls",
        "body": [
            "dcl-s ${1:name} ${3|char,packed,zoned,float,bindec,uns|}(${4:length}) inz(${5:*blanks});"
        ], 
        "description": "Declare variables (standalone field)"
    },
    "Variables: date type": {
        "prefix": "dcldate",
        "body": [
            "dcl-s ${1:name} date(*iso);"
        ], 
        "description": "Declare date type variable"
    },
    "Variables timestamp type": {
        "prefix": "dcltime",
        "body": [
            "dcl-s ${1:name} timestamp;"
        ], 
        "description": "Declare time type variable"
    },
    "Variables: constants": {
        "prefix": "dclc",
        "body": [
            "dcl-c ${1:name} const(${2:value});"
        ], 
        "description": "Declare constant"
    },
    // Data structures
    "Data structure: Normal": {
        "prefix": "ds",
        "body": [
            "dcl-ds ${1:name} len(${2:length});",
            "  ${3:name} ${4|char,packed,zoned|}(${5:length});",
            "end-ds;"
        ], 
        "description": "Data structure definition"
    },
    "Data structure: Position": {
        "prefix": "dspos",
        "body": [
            "dcl-ds ${1:name} len(${2:length}) qualified;",
            "  ${3:name} ${4|char,zoned,packed|}(${5:length}) pos(${6:value});",
            "end-ds;"
        ], 
        "description": "Data structure definition (with position)"
    },
    "Data structure: External": {
        "prefix": "dsext",
        "body": [
            "dcl-ds ${1:name} extname(${2:Object}) qualified;",
            "  ${0:// Fields here}",
            "end-ds;"
        ], 
        "description": "Data structure definition (external)"
    },
    "Data structure: dtaara": {
        "prefix": "dsdtara",
        "body": [
            "dcl-ds ${1:name} dtaara len(${2:length});",
            "  ${0:// Fields here}",
            "end-ds;"
        ], 
        "description": "*DTAARA definition"
    },
    "Data structure: psds": {
        "prefix": "dspsds",
        "body": [
            "dcl-ds ${1:n*} psds;",
            "  ${2:name} char(${2:length}) pos(${2:value})",
            "end-ds;"
        ], 
        "description": "PSDS(Program status data structure) definition"
    },
    "Data structure: Indicators": {
        "prefix": "dsind",
        "body": [
            "dcl-s ${1:name} pointer inz(%addr(*in));",
            "dcl-ds ${2:dsName} based(${1:name}) qualified;",
            "  ${3:indName} ind pos(${4:value});",
            "end-ds;"
        ], 
        "description": "Data structure definition (Indicators)"
    },
    // Protoypes
    "Prototypes: Input parms": {
        "prefix": "dclpi",
        "body": [
            "dcl-pi ${1:name};",
            "  ${2:name} ${3|char,packed,zoned|}(${4:length});",
            "end-pi;",
            "dcl-pr ${1:name};"
            "  ${2:name} ${3|char,packed,zoned|}(${4:length});",
            "end-pi;",
        ], 
        "description": "Create protoype for input parameters (procedure interface)"
    },
    "Prototypes: External programs": {
        "prefix": "dclpr",
        "body": [
            "dcl-pr ${1:name} extpgm;",
            "  ${2:name} ${3|char,packed,zoned|}(${4:length});",
            "end-pr;"
        ], 
        "description": "Create protoype for external programs"
    },
    // Procedures
    "Procedure": {
        "prefix": "dclproc",
        "body": [
			"*-------------------------------------------------------------------*",
			"* ${1:name}",
			"*-------------------------------------------------------------------*",
			"dcl-proc $1;",
			"",
			"  dcl-pi $1;",
			"  end-pi;",
			"  ${0:// Code here}",
			"  return;",
			"end-proc;"
        ], 
        "description": "Procedure definition"
    }, 
    // Operation-codes 
    "Operation codes: begsr": {
        "prefix": "sr",
        "body": [
            "*-------------------------------------------------------------------*",
			"* ${1:name}",
			"*-------------------------------------------------------------------*",
            "begsr ${1:name};",
            "  ${0:// Code here}",
            "endsr;"
        ], 
        "description": "Subroutine definition"
    },
    "Operation codes: if": {
        "prefix": "if",
        "body": [
            "if (${1:condition});",
            "  ${0:// Code here}",
            "endif;"
        ], 
        "description": "if"
    },
    "Operation codes: if-else": {
        "prefix": "ifelse",
        "body": [
            "if (${1:condition});",
            "  ${2:// Code here}",
            "else;"
            "  ${0:// Code here}",
            "endif;"
        ], 
        "description": "if-else"
    },
    "Operation codes: dow": {
        "prefix": "dow",
        "body": [
            "dow (${1:condition});",
            "  ${0:// Code here}",
            "enddo;"
        ], 
        "description": "Do while"
    },
    "Operation codes: for": {
        "prefix": "for",
        "body": [ 
            "for index = ${1:start} to ${2:end};",
            "  ${0:// Code here}",
            "endfor;"
        ], 
        "description": "for"
    },
    "Operation codes: monitor": {
        "prefix": "monitor",
        "body": [ 
            "monitor;",
            "  ${1:// Code here}",
            "on-except;",
            "  ${2:// Code here}",
            "on-error;",
            "  ${3:// Code here}",
            "endmon;"
        ], 
        "description": "It's used to prevent the program from being interrupted due to an error"
    },
    "Operation codes: select": {
        "prefix": "select",
        "body": [ 
            "select;",
            "  when(${1:condition});",
            "    ${2:// Code here}",
            "  other;",
            "    ${0:// Code here}",
            "endsl;"
        ], 
        "description": "It's used to make a case statement so that only statements satisfying the condition will be executed"
    },
    "Operation codes: chain + found": {
        "prefix": "chain",
        "body": [ 
            "chain (${1:key}) ${2:file};",
            "if %found(${2:file});",
            "  ${0:// Code here}",
            "endif;"
        ], 
        "description": "Chain + %found"
    },
    "Operation codes: setll + equal": {
        "prefix": "setlleq",
        "body": [ 
            "setll (${1:key}) ${2:file};",
            "if %equal(${2:file});",
            "  ${0:// Code here}",
            "  reade (${1:key}) ${2:file};",
            "endif;"
        ], 
        "description": "Setll + %equal"
    },
    "Operation codes: setll + reade": {
        "prefix": "setllrde",
        "body": [ 
            "setll (${1:key}) ${2:file};",
            "reade (${1:key}) ${2:file};",
            "dow ${3:not} %eof(${2:file});",
            "  ${0:// Code here}",
            "  reade (${1:key}) ${2:file};",
            "endif;"
        ], 
        "description": "Setll + reade"
    },
    "Operation codes: setgt + readpe": {
        "prefix": "setgtrp",
        "body": [ 
            "setgt (${1:key}) ${2:file};",
            "reape (${1:key}) ${2:file};",
            "dow ${3:not} %eof(${2:file});",
            "  ${0:// Code here}",
            "  reape (${1:key}) ${2:file};",
            "endif;"
        ], 
        "description": "Setll + readpe"
    },
    // Built functions
    "Built-in functions: %char()": {
        "prefix": "char",
        "body": [ 
            "${1:variable} = %char(${2:variable});"
        ], 
        "description": "It's used to convert to character data type"
    },
    "Built-in functions: %int()": {
        "prefix": "int",
        "body": [ 
            "${1:variable} = %int(${2:variable});"
        ], 
        "description": "It's used to convert to integer data type"
    },
    "Built-in functions: %uns()": {
        "prefix": "uns",
        "body": [ 
            "${1:variable} = %uns(${2:numeric or character expression});"
        ], 
        "description": "It's used to convert the value of the expression to unsigned format"
    },
    "Built-in functions: %float()": {
        "prefix": "float",
        "body": [ 
            "${1:variable} = %float(${2:numeric or character expression});"
        ], 
        "description": "It's used to convert the value of the expression to floating format"
    },
    "Built-in functions: %dec()": {
        "prefix": "dec",
        "body": [ 
            "${1:variable} = %dec(${2:variable}:${3:length}:${4:decimal});"
        ], 
        "description": "It's used to convert to decimal data type"
    },
    "Built-in functions: %date()": {
        "prefix": "date",
        "body": [ 
            "${1:variable} = %date(${2:value}:${3|*iso,*mdy,*dmy,*ymd,*usa|});"
        ], 
        "description": "It's used to convert a character, numeric, or timestamp data to Date type"
    },
    "Built-in functions: %time()": {
        "prefix": "time",
        "body": [ 
            "${1:variable} = %time(${2:value}:${3|*iso,*hms,*usa|});"
        ], 
        "description": "It's used to convert a character, numeric, or timestamp data to Time type"
    },
    "Built-in functions: %timestmap()": {
        "prefix": "timestmp",
        "body": [ 
            "${1:variable} = %timestamp(${2:String value}:${3|*iso,*iso0|});"
        ], 
        "description": "It's used to convert string into timestamp data type"
    },
    "Built-in functions: %substr()": {
        "prefix": "subst",
        "body": [ 
            "dcl-s ${1:variable} char(${2:length});",
            "${1:variable} = %subst(${3:variable}:${4:pos}:${5:length});"
        ], 
        "description": "Extracts the string from any position"
    },
    "Built-in functions: %scan()": {
        "prefix": "scan",
        "body": [ 
            "dcl-s ${1:variable} zoned(4);",
            "${1:variable} = %scan(${2:search argument}:${3:source string}:${4:start});"
        ], 
        "description": "It's used to find the first position of the search argument in the source string"
    },
    "Built-in functions: %diff()": {
        "prefix": "diff",
        "body": [ 
            "${1:diff} = %diff(${2:value1}:${3:value2}:${4|*MS,*S,*MN,*H,*D,*M,*Y|});"
        ], 
        "description": "It's used to find difference between Two Date, Time, or Timestamp Values"
    },
    "Built-in functions: %trim": {
        "prefix": "trim",
        "body": [ 
            "${1:variable} = %trim(${2:String}:${3:Characters to trim});"
        ], 
        "description": "It's used to trim blank spaces from both sides of a string"
    },
    "Built-in functions: %trimr": {
        "prefix": "trimr",
        "body": [ 
            "${1:variable} = %trimr(${2:String}:${3:Characters to trim});"
        ], 
        "description": "It's used to trim trailing spaces of a string"
    },
    "Built-in functions: %lower": {
        "prefix": "lower",
        "body": [ 
            "${1:variable} = %lower(${2:String}:${3:Initial position}:${4:Initial position});"
        ], 
        "description": "It's used to convert all alphabetic characters to lowercase"
    },
    "Built-in functions: %upper": {
        "prefix": "upper",
        "body": [ 
            "${1:variable} = %upper(${2:String}:${3:Initial position}:${4:Final position});"
        ], 
        "description": "It's used to convert all alphabetic characters to uppercase"
    },
    "Built-in functions: %split": {
        "prefix": "split",
        "body": [ 
            "${1:array} = %split(${2:String)});"
        ], 
        "description": "It's used to return an array of substrings"
    },
    "Built-in functions: %len": {
        "prefix": "len",
        "body": [ 
            "${1:variable} = %len(${2:Expression)});"
        ], 
        "description": "It's used to get or set length"
    },
    "Built-in functions: %charCount": {
        "prefix": "charCount",
        "body": [ 
            "${1:variable} = %charCount(${2:String)});"
        ], 
        "description": "It's used to return the number of characters in the alphanumeric, graphic, or UCS-2 expression"
    },
    "Built-in functions: %left": {
        "prefix": "left",
        "body": [ 
            "${1:variable} = %left(${2:String}:${3:Length}:${4|*natural,*stdcharsize|});"
        ], 
        "description": "It's used to return the leftmost characters of a string"
    },
    "Built-in functions: %min": {
        "prefix": "min",
        "body": [ 
            "${1:size} = %min(${2:item1}:${3:item2}:${4:item3...});"
        ], 
        "description": "It's used to return the maximum value of its operands"
    },
    "Built-in functions: %max": {
        "prefix": "max",
        "body": [ 
            "${1:size} = %max(${2:item1}:${3:item2}:${4:item3...});"
        ], 
        "description": "It's used to return the minimum value of its operands"
    },
}


